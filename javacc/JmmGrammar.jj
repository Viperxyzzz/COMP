PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;
TOKENS_ARE_NODES = false;

SKIP : " " | "\t" | "\r" | "\n" | <"//" (~["\n"])*>;

TOKEN :
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< OPEN_PAREN : "(" > |
	< CLOSE_PAREN : ")" > |
	< IMPORT : "import" > |
	< CLASS : "class" > |
	< EXTENDS : "extends" > |
	< RETURN : "return" > |
	< PUBLIC : "public" > |
	< STATIC : "static" > |
	< VOID : "void" > |
	< MAIN : "main" > |
	< IF : "if" > |
	< ELSE : "else" > |
	< WHILE : "while" > |
	< LENGTH : "length" > |
	< EQUAL : "=" > |
	< EQUALEQUAL : "==" > |
	< STRING : "String" > |
	< BOOLEAN : "boolean" > |
	< INT_ARR : "int[]" > |
	< INT : "int" > |
	< TRUE : "true" > |
	< FALSE : "false" > |
	< THIS : "this" > |
	< NEW : "new" > |
	< LSQUARE : "[" > |
	< RSQUARE : "]" > |
	< LBRACE : "{" > |
	< RBRACE : "}" > |
	< SEMICOLON : ";" > |
	< LESSTHAN : "<" > |
	< BIGGERTHAN : ">" > |
	< AND : "&&" > |
	< OR : "||" > |
	< DOT : "." > |
	< COMMA : "," > |
	< EXCLAMATION : "!" > |
    < INTEGER : (["0" - "9"])+ > |
    < IDENTIFIER: ((["a" - "z"] | ["A" - "Z"] | "$" | "_") (["a" - "z"] | ["A" - "Z"] | "$" | "_" | ["0" - "9"])*) >
;


Start : (ImportDeclaration)* ClassDeclaration <EOF>;

ImportDeclaration:
     < IMPORT > < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #Id InnerImport
;

InnerImport #void:
    (
        < DOT > < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #Id InnerImport |
        < SEMICOLON >
    )
;

ClassDeclaration:
    < CLASS > < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #ClassName Extends
    < LBRACE > ( VarDecl )* ( MethodDeclaration )*
    < RBRACE >
;

Extends #void:
    (
        < EXTENDS > < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #ExtendsExp
    )?
;

VarDecl:
    SCAN 2 Type < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #Id < SEMICOLON >
;

MethodDeclaration #MethodDecl:
    < PUBLIC > (MainMethod | OtherMethod)
;

MainMethod #void:
    < STATIC > < VOID > ({ jjtThis.put("value", "void"); jjtThis.put("isStatic", "True");}) #Type < MAIN > ({ jjtThis.put("value", "main"); }) #MethodName
    < OPEN_PAREN >
        < STRING > < LSQUARE > < RSQUARE > ({ jjtThis.put("isArray", "True"); jjtThis.put("value", "String");}) #Type < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #Id
    < CLOSE_PAREN > #Param(2)
    < LBRACE >
        InitVarDecl InitStatement
    < RBRACE >
;

OtherMethod #void:
    Type < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #MethodName
    < OPEN_PAREN >
        (Param ( < COMMA > Param )*)?
    < CLOSE_PAREN >
    < LBRACE >
       InitVarDecl InitStatement < RETURN > Assignment < SEMICOLON > #ReturnExp(1)
    < RBRACE >
;

InitVarDecl: ( VarDecl )* ;

InitStatement: ( Statement )* ;

Param:
    Type < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #Id
;

Type #void:
    < INT_ARR > ({ jjtThis.put("isArray", "True"); jjtThis.put("value", "int"); }) #Type |
    < BOOLEAN > ({ jjtThis.put("value", "boolean"); }) #Type |
    < INT > ({ jjtThis.put("value", "int"); }) #Type |
    < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #Type
;

Statement #void:
    < LBRACE > ( Statement )* < RBRACE > |
    IfStatement |
    WhileStatement |
    Assignment < SEMICOLON >
;

IfStatement:
    < IF > (< OPEN_PAREN > LogicalExpression < CLOSE_PAREN > Statement) < ELSE > Statement #ElseStatement
;

WhileStatement:
    < WHILE > < OPEN_PAREN > LogicalExpression < CLOSE_PAREN > Statement
;

Assignment #void:
    LogicalExpression
    (
        < EQUAL > LogicalExpression #Assignment(2)
    )?
;

LogicalExpression #void:
    ComparableExpression
    (
        < AND > ComparableExpression #AndExp(2)
    )*
;

ComparableExpression #void:
    AdditiveExpression
    (
        < LESSTHAN > AdditiveExpression #SmallerThan(2)
    )*
;

AdditiveExpression #void:
	MultiplicativeExpression
	(
		(< PLUS > MultiplicativeExpression) ({ jjtThis.put("op", "add"); }) #BinOp(2) |
		(< MINUS > MultiplicativeExpression) ({ jjtThis.put("op", "sub"); }) #BinOp(2)
	)*
;

MultiplicativeExpression #void:
	ArrayExpression
	(
		(< TIMES > ArrayExpression) ({ jjtThis.put("op", "mult"); }) #BinOp(2) |
		(< DIVIDE > ArrayExpression) ({ jjtThis.put("op", "div"); }) #BinOp(2)
	)*
;

ArrayExpression #void:
    NotExpression
    (
         Array #ArrayExp(2)
    )?
;

Array #void:
    < LSQUARE > LogicalExpression < RSQUARE >
;

NotExpression #void:
    DotExpression |
    < EXCLAMATION > ArrayExpression #Not(1)
;

DotExpression #void:
     Factor
     (
        < DOT >
        (
            < LENGTH > #LengthExp |
            CallMethod
        ) #DotExp(2)
     )*
;

CallMethod:
    < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #Id < OPEN_PAREN > ( ParamToPass )? < CLOSE_PAREN >
;

ParamToPass:
    LogicalExpression ( < COMMA > LogicalExpression )*
;

Factor #void:
	< INTEGER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #IdInt |
	< TRUE > #TrueId |
    < FALSE > #FalseId |
    < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #Id |
    < THIS > #ThisId |
    < NEW > (< INT > Array #NewArray(1) | < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #Id < OPEN_PAREN > < CLOSE_PAREN > #NewExp(1))  |
    < MINUS > Factor #Negative(1) |
    < OPEN_PAREN > LogicalExpression < CLOSE_PAREN >
;

// Injections for the implementation of JmmNode
// Since this is injected into BaseNode, it affects only non-terminals
INJECT BaseNode :
		import pt.up.fe.comp.jmm.ast.JmmNode;
		import pt.up.fe.comp.jmm.ast.AJmmNode;
		import pt.up.fe.specs.util.SpecsCollections;
		extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {

        return SpecsCollections.cast(children(), JmmNode.class);
    }

    @Override
    public void add(JmmNode child, int index) {

        if (child instanceof Node) {

            addChild(index, (Node) child);
        } else {

            throw new RuntimeException("Node " + child + " is not a Node.");
        }

    }
}
