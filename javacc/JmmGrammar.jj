PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;

SKIP : " " | "\t" | "\r" | "\n" | <"//" (~["\n"])*>;

TOKEN :
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< OPEN_PAREN : "(" > |
	< CLOSE_PAREN : ")" > |
	< IMPORT : "import" > |
	< CLASS : "class" > |
	< EXTENDS : "extends" > |
	< RETURN : "return" > |
	< PUBLIC : "public" > |
	< STATIC : "static" > |
	< VOID : "void" > |
	< MAIN : "main" > |
	< IF : "if" > |
	< ELSE : "else" > |
	< WHILE : "while" > |
	< LENGTH : "length" > |
	< EQUAL : "=" > |
	< STRING : "String" > |
	< BOOLEAN : "boolean" > |
	< INT_ARR : "int[]" > |
	< INT : "int" > |
	< TRUE : "true" > |
	< FALSE : "false" > |
	< THIS : "this" > |
	< NEW : "new" > |
	< LSQUARE : "[" > |
	< RSQUARE : "]" > |
	< SEMICOLON : ";" > |
	< LESSTHAN : "<" > |
    < INTEGER : (["0" - "9"])+ > |
    < IDENTIFIER: ((["a" - "z"] | ["A" - "Z"] | "$" | "_") (["a" - "z"] | ["A" - "Z"] | "$" | "_" | ["0" - "9"])*) >
;


Start : ImportDeclaration ClassDeclaration <EOF>;

AdditiveExpression :
	MultiplicativeExpression
	(
		(< PLUS > | < MINUS >)
		MultiplicativeExpression
	)?
;

MultiplicativeExpression :
	Factor
	(
		(< TIMES > | < DIVIDE >)
		Factor
	)?
;

Factor :
	< INTEGER > |
	< MINUS> Factor |
	< OPEN_PAREN > AdditiveExpression < CLOSE_PAREN >
;


ImportDeclaration:
    (
        < IMPORT > < IDENTIFIER > ( "." < IDENTIFIER > )* < SEMICOLON >
    )*
;

ClassDeclaration:
    < CLASS > < IDENTIFIER >
    (
        < EXTENDS > < IDENTIFIER >
    )?
    "{" ( VarDecl )* ( MethodDeclaration )*
    "}"
;

VarDecl:
    SCAN 2 Type < IDENTIFIER > < SEMICOLON >
;

MethodDeclaration:
    < PUBLIC > (Pti | Psvm)
;

Pti:
    Type < IDENTIFIER > < OPEN_PAREN > (Type < IDENTIFIER > ( "," Type < IDENTIFIER > )* )? < CLOSE_PAREN > "{"
    ( VarDecl )* ( Statement )* < RETURN > Expression < SEMICOLON >
    "}"
;

Psvm:
    < STATIC > < VOID > < MAIN > < OPEN_PAREN > < STRING > "[" "]" < IDENTIFIER > < CLOSE_PAREN > "{"
    ( VarDecl )* ( Statement )*
    "}"
;

Type:
    < INT_ARR > |
    < BOOLEAN > |
    < INT > |
    < IDENTIFIER >
;

Statement:
    "{" ( Statement )* "}" |
    < IF > < OPEN_PAREN > Expression < CLOSE_PAREN > Statement < ELSE > Statement |
    < WHILE > < OPEN_PAREN > Expression < CLOSE_PAREN > Statement |
    (SCAN 2 Expression < SEMICOLON > | Assignment)
;

Assignment:
    < IDENTIFIER >
    (< EQUAL > | < LSQUARE > Expression < RSQUARE > < EQUAL >)
    Expression < SEMICOLON >
;

Expression:
    ExpressionFirst (
        ("&&" | < PLUS > | < MINUS > | < TIMES > | < DIVIDE > | < LESSTHAN >) Expression |
        "." ( < LENGTH > | < IDENTIFIER > "(" ( Expression ( "," Expression )* )? ")" )
    )*
;


ExpressionFirst:
    < INTEGER > |
    < TRUE > |
    < FALSE > |
    < IDENTIFIER > |
    < THIS > |
    < NEW > (< INT > < LSQUARE > Expression < RSQUARE > | < IDENTIFIER > < OPEN_PAREN > < CLOSE_PAREN >) |
    "!" Expression |
    < OPEN_PAREN > Expression < CLOSE_PAREN >
;
