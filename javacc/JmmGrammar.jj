PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;
TOKENS_ARE_NODES = false;

SKIP : " " | "\t" | "\r" | "\n" | <"//" (~["\n"])*>;

TOKEN :
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< OPEN_PAREN : "(" > |
	< CLOSE_PAREN : ")" > |
	< IMPORT : "import" > |
	< CLASS : "class" > |
	< EXTENDS : "extends" > |
	< RETURN : "return" > |
	< PUBLIC : "public" > |
	< STATIC : "static" > |
	< VOID : "void" > |
	< MAIN : "main" > |
	< IF : "if" > |
	< ELSE : "else" > |
	< WHILE : "while" > |
	< LENGTH : "length" > |
	< EQUAL : "=" > |
	< EQUALEQUAL : "==" > |
	< STRING : "String" > |
	< BOOLEAN : "boolean" > |
	< INT_ARR : "int[]" > |
	< INT : "int" > |
	< TRUE : "true" > |
	< FALSE : "false" > |
	< THIS : "this" > |
	< NEW : "new" > |
	< LSQUARE : "[" > |
	< RSQUARE : "]" > |
	< SEMICOLON : ";" > |
	< LESSTHAN : "<" > |
	< BIGGERTHAN : ">" > |
	< AND : "&&" > |
	< OR : "||" > |
    < INTEGER : (["0" - "9"])+ > |
    < IDENTIFIER: ((["a" - "z"] | ["A" - "Z"] | "$" | "_") (["a" - "z"] | ["A" - "Z"] | "$" | "_" | ["0" - "9"])*) >
;


Start : ImportDeclaration ClassDeclaration <EOF>;

ImportDeclaration #void:
    (
        < IMPORT > #ImportDeclaration < IDENTIFIER >  ( "." < IDENTIFIER > )* < SEMICOLON >
    )*
;

ClassDeclaration:
    < CLASS > < IDENTIFIER >
    (
        < EXTENDS > #ExtendsExp < IDENTIFIER > #Id
    )?
    "{" ( VarDecl )* ( MethodDeclaration )*
    "}"
;

VarDecl:
    SCAN 2 Type < IDENTIFIER > #Id < SEMICOLON >
;

MethodDeclaration #void:
    < PUBLIC > (Pti | Psvm)
;

Pti:
    Type < IDENTIFIER > #Id < OPEN_PAREN > (Type < IDENTIFIER > ( "," Type < IDENTIFIER > )* )? < CLOSE_PAREN > "{"
    ( VarDecl )* ( Statement )* < RETURN > #ReturnExp Assignment < SEMICOLON >
    "}"
;

Psvm:
    < STATIC > < VOID > < MAIN > < OPEN_PAREN > < STRING > "[" "]" < IDENTIFIER > < CLOSE_PAREN > "{"
    ( VarDecl )* ( Statement )*
    "}"
;

Type #void:
    < INT_ARR > #TypeIntArray |
    < BOOLEAN > #TypeBoolean |
    < INT > #TypeInt |
    < IDENTIFIER > ({jjtThis.put("foo", "bar"); }) #TypeId
;

Statement #void:
    "{" ( Statement )* "}" |
    < IF > #IfStatement < OPEN_PAREN > Assignment < CLOSE_PAREN > Statement < ELSE > #ElseStatement Statement |
    < WHILE > #WhileStatement < OPEN_PAREN > Assignment < CLOSE_PAREN > Statement |
    Assignment < SEMICOLON >
;

Assignment #void:
    LogicalExpression
    (
        < EQUAL > #Equals
        Assignment #Assignment
    )?
;

LogicalExpression #void:
    ComparableExpression
    (
        (< AND > #LogicalAnd | < OR > #LogicalOr)
        Assignment
    )?
;

ComparableExpression #void:
    AdditiveExpression
    (
        (< LESSTHAN > #IsSmallerThan | < BIGGERTHAN > #IsBiggerThan | < EQUALEQUAL >)
        Assignment
    )?
;

AdditiveExpression #void:
	MultiplicativeExpression
	(
		(< PLUS > | < MINUS >)
		Assignment
	)?
;

MultiplicativeExpression #void:
	ParenExpression
	(
		(< TIMES > | < DIVIDE >)
		Assignment
	)?
;

ParenExpression #void:
    ArrayExpression
	(
	    < OPEN_PAREN > Assignment < CLOSE_PAREN >
    )?
;

ArrayExpression #void:
    DotExpression
    (
        < LSQUARE > Assignment < RSQUARE >
    )?
;

DotExpression #void:
     Factor
     (
        "." ( < LENGTH > | < IDENTIFIER > "(" ( Assignment ( "," Assignment )* )? ")" )
     )*
 ;

Factor #void:
	< INTEGER > #IdInt |
	< MINUS > #Negative Factor |
	ExpressionFirst
;

Expression #void:
    ExpressionFirst (
        ("&&" | < PLUS > | < MINUS > | < TIMES > | < DIVIDE > | < LESSTHAN > | < EQUAL >) Expression |
        "." ( < LENGTH > | < IDENTIFIER > "(" ( Expression ( "," Expression )* )? ")" ) |
        < LSQUARE > Expression < RSQUARE >
    )*
;

ExpressionFirst #void:
    < INTEGER > #Id |
    < TRUE > #TrueId |
    < FALSE > #FalseId |
    < IDENTIFIER > #Id |
    < THIS > #ThisId |
    < NEW > (< INT > < LSQUARE > Assignment < RSQUARE > | < IDENTIFIER > < OPEN_PAREN > < CLOSE_PAREN >) |
    "!" Assignment #Not |
    < OPEN_PAREN > Assignment < CLOSE_PAREN > |
    < LSQUARE > Assignment < RSQUARE >
;

// Injections for the implementation of JmmNode
// Since this is injected into BaseNode, it affects only non-terminals
INJECT BaseNode :
		import pt.up.fe.comp.jmm.ast.JmmNode;
		import pt.up.fe.comp.jmm.ast.AJmmNode;
		import pt.up.fe.specs.util.SpecsCollections;
		extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {

        return SpecsCollections.cast(children(), JmmNode.class);
    }

    @Override
    public void add(JmmNode child, int index) {

        if (child instanceof Node) {

            addChild(index, (Node) child);
        } else {

            throw new RuntimeException("Node " + child + " is not a Node.");
        }

    }
}
