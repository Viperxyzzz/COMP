PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;
TOKENS_ARE_NODES = false;

SKIP : " " | "\t" | "\r" | "\n" | <"//" (~["\n"])*>;

TOKEN :
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< OPEN_PAREN : "(" > |
	< CLOSE_PAREN : ")" > |
	< IMPORT : "import" > |
	< CLASS : "class" > |
	< EXTENDS : "extends" > |
	< RETURN : "return" > |
	< PUBLIC : "public" > |
	< STATIC : "static" > |
	< VOID : "void" > |
	< MAIN : "main" > |
	< IF : "if" > |
	< ELSE : "else" > |
	< WHILE : "while" > |
	< LENGTH : "length" > |
	< EQUAL : "=" > |
	< EQUALEQUAL : "==" > |
	< STRING : "String" > |
	< BOOLEAN : "boolean" > |
	< INT_ARR : "int[]" > |
	< INT : "int" > |
	< TRUE : "true" > |
	< FALSE : "false" > |
	< THIS : "this" > |
	< NEW : "new" > |
	< LSQUARE : "[" > |
	< RSQUARE : "]" > |
	< SEMICOLON : ";" > |
	< LESSTHAN : "<" > |
	< BIGGERTHAN : ">" > |
	< AND : "&&" > |
	< OR : "||" > |
	< DOT : "." > |
    < INTEGER : (["0" - "9"])+ > |
    < IDENTIFIER: ((["a" - "z"] | ["A" - "Z"] | "$" | "_") (["a" - "z"] | ["A" - "Z"] | "$" | "_" | ["0" - "9"])*) >
;


Start : (ImportDeclaration)* ClassDeclaration <EOF>;

ImportDeclaration:
     < IMPORT > < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #MainImport InnerImport
;

InnerImport #void:
    (
        < DOT > < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #InnerImport InnerImport |
        < SEMICOLON >
    )
;

ClassDeclaration #ClassDeclaration:
    < CLASS > < IDENTIFIER > Extends
    "{" ( VarDecl )* ( MethodDeclaration )*
    "}"
;

Extends #void:
    (
        < EXTENDS > < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #ExtendsExp
    )?
;

VarDecl:
    SCAN 2 Type < IDENTIFIER > < SEMICOLON >
;

MethodDeclaration #void:
    < PUBLIC > (MainMethod | OtherMethod)
;

MainMethod:
    < STATIC > < VOID > < MAIN > < OPEN_PAREN > < STRING > "[" "]" < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #Param < CLOSE_PAREN >
    "{"
        ( VarDecl )* ( Statement )*
    "}"
;

OtherMethod #MethodDecl:
    Type < IDENTIFIER > < OPEN_PAREN > (Type < IDENTIFIER > ( "," Type < IDENTIFIER > )* )? < CLOSE_PAREN >
    "{"
        ( VarDecl )* ( Statement )* < RETURN > Assignment < SEMICOLON > #ReturnExp(1)
    "}"
;

Type #void:
    < INT_ARR > #TypeIntArray |
    < BOOLEAN > #TypeBoolean |
    < INT > #TypeInt |
    < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #TypeId
;

Statement #void:
    "{" ( Statement )* "}" |
    < IF > (< OPEN_PAREN > Assignment < CLOSE_PAREN > Statement) #IfStatement < ELSE > Statement #ElseStatement |
    < WHILE > #WhileStatement < OPEN_PAREN > Assignment < CLOSE_PAREN > Statement |
    Assignment < SEMICOLON >
;

Assignment #void:
    LogicalExpression
    (
        (< EQUAL > LogicalExpression) ({ jjtThis.put("op", "assign"); }) #BinOp(2)
    )?
;

LogicalExpression #void:
    ComparableExpression
    (
        (< AND > #LogicalAnd | < OR > #LogicalOr)
        ComparableExpression
    )?
;

ComparableExpression #void:
    AdditiveExpression
    (
        (< LESSTHAN > AdditiveExpression) ({ jjtThis.put("op", "smaller"); }) #BinOp(2) |
        (< BIGGERTHAN > AdditiveExpression) ({ jjtThis.put("op", "bigger"); }) #BinOp(2) |
        (< EQUALEQUAL > AdditiveExpression) ({ jjtThis.put("op", "is_equal"); }) #BinOp(2)
    )?
;

AdditiveExpression #void:
	MultiplicativeExpression
	(
		(< PLUS > MultiplicativeExpression) ({ jjtThis.put("op", "add"); }) #BinOp(2) |
		(< MINUS > MultiplicativeExpression) ({ jjtThis.put("op", "sub"); }) #BinOp(2)
	)?
;

MultiplicativeExpression #void:
	ArrayExpression
	(
		(< TIMES > ArrayExpression) ({ jjtThis.put("op", "mult"); }) #BinOp(2) |
		(< DIVIDE > ArrayExpression) ({ jjtThis.put("op", "div"); }) #BinOp(2)
	)?
;

ArrayExpression #void:
    ParenExpression
    (
        < LSQUARE > Assignment < RSQUARE >
    )?
;

ParenExpression #void:
    DotExpression
	(
	    < OPEN_PAREN > Assignment < CLOSE_PAREN >
    )?
;

DotExpression #void:
     Factor
     (
        < DOT > ( < LENGTH > | < IDENTIFIER > "(" ( Assignment ( "," Assignment )* )? ")" )
     )*
 ;

Factor #void:
	< INTEGER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #IdInt |
	< MINUS > Factor #Negative(1) |
	< TRUE > #TrueId |
    < FALSE > #FalseId |
    < IDENTIFIER > ({ jjtThis.put("value", lastConsumedToken.getImage()); }) #Id |
    < THIS > #ThisId |
    < NEW > (< INT > < LSQUARE > Assignment < RSQUARE > | < IDENTIFIER > < OPEN_PAREN > < CLOSE_PAREN >) |
    "!" Assignment #Not |
    < OPEN_PAREN > Assignment < CLOSE_PAREN > |
    < LSQUARE > Assignment < RSQUARE >
;

// Injections for the implementation of JmmNode
// Since this is injected into BaseNode, it affects only non-terminals
INJECT BaseNode :
		import pt.up.fe.comp.jmm.ast.JmmNode;
		import pt.up.fe.comp.jmm.ast.AJmmNode;
		import pt.up.fe.specs.util.SpecsCollections;
		extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {

        return SpecsCollections.cast(children(), JmmNode.class);
    }

    @Override
    public void add(JmmNode child, int index) {

        if (child instanceof Node) {

            addChild(index, (Node) child);
        } else {

            throw new RuntimeException("Node " + child + " is not a Node.");
        }

    }
}
